c
Rating.where("user_id IN (#{following_ids}) OR user_id = :user_id", user_id: id)
following_ids
c
@skate_spots.class
@skate_spots.length
@skate_spots.count
@skate_spots
c
SkateSpot.first
@UV_notNil
c
@UV_notNil.any?
@UV_notNil
UV_notNil
c
@skate_spots.firstc
@skate_spots.first
c
@UV_notNil.any?
@UV_notNil
c
@skate_spots.pluck(:id, :user_votes)
@skate_spots.where.not(user_votes: nil)
@skate_spots.pluck(:user_votes)
@skate_spots.first.user_votes
@skate_spots.first
@skate_spots.pluck(:user_votes)
@skate_spots
c
@skate_spots.any?
@skate_spots.count
@skate_spots
c
@skate_spots.any?
@skate_spots = @skate_spots.find(@up_IDs)
@notNil
@skate_spots
c
SkateSpot.pluck(:user_votes)
@UV_vals
SkateSpot.where.not(user_votes: nil)
@notNil.any?
@notNil
@notNill
@values
c
@upIDs
@skate_spots
c
@skate_spots
c
@skate_spots
c
@skate_spots
c
@skate_spots
c
@skate_spots
c
@skate_spots
c
@skate_spots
c
@skate_spots
c
@skate_spots
c
@skate_spots
c
params[:zip_code].length
params[:zip_code]
params[:mileage].length
params[:mileage]
@skate_spots
c
params[:zip_code].length
params[:zip_code]
params[:zip_code].nil?
(!params[:zip_code].nil?) and (!params[:mileage].nil?)
@skate_spots
c
@skate_spots
c
params
@skate_spots
@skate_spots.where.not(user_votes: nil)
@values
@skate_spots = @skate_spots.find(@up_IDs)
c
params[:commit]
params
params[:filter]
params[:upvotes][:upvoteFilter]
params
params[:search]
c
@skate_spots
c
@skate_spots.count
@skate_spots
@@skate_spots
c
@ratings.where(id: @s_rate.ratings.ids)
@ratings.where(id: @s_rate.ratings.id)
@ratings
@s_rate.ratings
c
@s_rate
@useSort
c
SkateSpot.find(key)
@skate_spots
key
c
key
c
@useSort
c
Rating.where(user_id: 3)
Rating.find(user_id: 3)
@ratings.find(user_id: 3)
current_user.id
current_user.ratings.last
@rating.user_id
c
current_user.ratings
@rating.user_id
@rating
c
@user.id
Rating.last
@user.ratings
@user
c
@user.ratings.any?
@user.ratings
@useSort
@stuff = @useSort.collect {|ind| ind[0]}
c
@sprSpr_skateSpots.nil?
@sprSpr_skateSpots
@spr_skateSpots.nil?
@spr_skateSpots
!@m_skateSpots.nil?
@m_skateSpots.nil?
@m_skateSpots
c
@m_skateSpots.nil?
@m_skateSpots
c
@m_skateSpots.count
@m_skateSpots.any?
@m_skateSpots.nil?
@m_skateSpots
@spr_skateSpots
@sprSpr_skateSpots
c
@user.followers.count
@user.ratings.count
@user.skate_spots.count
@user.skate_spots
@user
@user = @users.find(1)
@user.skate_spots
@user = @users.first
c
@user.rating_feed.ids
@user.rating_feed
@user
!current_user.user_blocked_by?(@user)
current_user.user_blocked_by?(@user)
c
current_user.rating_feed.ids
c
current_user.id
current_user.rating_feed.ids
current_user.rating_feed
current_uer.rating_feed
c
index
c
session[:mobile_param] == 0
session[:mobile_param]
session
params
c
session[:mobile_param]
c
request.user_agent.downcase
agent = request.headers["HTTP_USER_AGENT"].downcase
c
request.env["HTTP_USER_AGENT"]
c
request.user_agent =~ /\b(Android|iPhone|iPad|Windows|Macintosh Phone|Opera Mobi|Kindle|BackBerry|PlayBook)\b/i
request.user_agent =~ /\b(Android|iPhone|iPad|Windows Phone|Opera Mobi|Kindle|BackBerry|PlayBook)\b/i
request.user_agent
c
@stuff =~ /Mobile|webOS/
stuff =~ /Mobile|webOS/
=~ /Mobile|webOS/
/Mobile|webOS/
request.user_agent =~ /Mobile|webOS/
request.user_agent
session[:mobile_param]
c
@user.followers.first
@user.followers
@user.following?(User.first)
User.first
current_user.followers
current_user.inspect
current_user
@user
c
rating.skate_spot
rating
c
@user.ratings
@user = User.first
@rating.user
@rating
exit
query.address
query
exit
n
exit
query
exit
geo_localization
quit
@skate_spot
@skate_spot.save
n
@skate_spot
exit
@skate_spot.locations
@skate_spot.location
@location
