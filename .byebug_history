c
vote_IDs.length
!vote_IDs.nil?
vote_IDs.nil?
vote_IDs
skate_spots
@skate_spots
c
!vote_IDs.nil?
vote_IDs.nil?
vote_IDs
vote_IDS
c
@skate_spots.length
@skate_spots
@skate_spots.count
c
rating.image.present?
rating.description
c
rating.image.nil?
rating.image.present?
rating.description
c
rating.description
c
rating.image.any?
rating.image.present?
rating.image.nil?
rating.image
c
@event.date.localtime
c
@event.date.localtime
@event.date
@event
c
event.date
event
c
(skate_spots.ids & vote_IDs).any?
(skate_spots.ids & vote_IDs).any?)
skate_spots
(@skate_spots.ids & vote_IDs).any?
 @skate_spots.present?
c
vote_IDs.count
vote_IDs.nil?
vote_IDs
c
(@skate_spots.ids & vote_IDs).any?
@skate_spots.ids & vote_IDs).any?
((@skate_spots.ids & vote_IDs).any?) and (vote_IDs != "N")
vote_IDs
c
(@skate_spots.ids & vote_IDs).any?
c
(@skate_spots.ids & vote_IDs).any?
(@skate_spots.ids & vote_IDs).an?
vote_IDs
c
(index == (@ok.length - 1)) and (@ok.length == 1)
(index == (@ok.length - 1)) and (@okay.length == 1)
@ok.length
index == (@ok.length - 1)
index == (@ok.length - 2)
index < (@ok.length - 1)
@ok.length
c
cc
c
@ok.length - 1
index
@ok.length
@ok
key.first
key
value.values
value
key
c
@ok.length
@ok
c
@ok.length
c
@ok.length
@ok.nil?
@ok
c
params[:search]
c
@ok
@ok = @test.select { |he| params[he].values.first == "1" }
@ok
@ok = @test.select { |he| puts params[he].values.first == "1" }
@test.select { |he| puts params[he].values.first == "1" }
@test.select { |he, ve| puts params[he].values.first == "1" }
@test.select { |he, ve| puts params[he].values.first.class }
@test.select { |he, ve| puts params[he].values.first }
@test.select { |he, ve| puts params[he].values.class }
@test.select { |he, ve| puts params[he].values }
@test.select { |he, ve| puts params[he] }
@test.select { |he, ve| puts params[:he] }
@test.select { |he, ve| puts he.values }
@test.select { |he, ve| puts ve }
@test.select { |he, ve| puts he }
@test.select { |he, ve| he[:upVotes] }
@test.select { |he| he[:upVotes] }
@test.select { |he| puts he }
@test
@test.select { |k, val| val ? puts val.keys : puts val }
@test.select { |k, val| !val.nil? ? puts val.keys : puts val }
@test.select { |k, val| !val.nil? puts val.keys : puts val }
@test.values.select { |k, val| !val.nil? puts val.keys : puts val }
@test.values.each { |k, val| !val.nil? val.keys : val }
@test.values.each { |k, val| puts !val.nil? val.keys }
@test.values.each { |k, val| puts val.keys }
@test.values.each { |k, val| puts val }
@test.values.each.select { |k, val| puts val }
@test.values.select { |k, val| puts val }
@test.values.select { |k, val| val == 1 }
@test.values.select { |k, val| val == "1" }
@test.values_at.select { |k, val| val == "1" }
@test.values.values_at.select { |k, val| val == "1" }
@test.values.values.select { |k, val| val == "1" }
@test.values.last
@test.values
key.first == "wcmxAccessible"
params
value
key
c
key
value.keys.first
params[:mileage]
value.values.first == "1"
value.values.first
value.values
value.keys
value
key
c
@test.class
@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage)
@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values
@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage)
@test.select { |k,val| val.select { |s| puts s.cla } }
@test.select { |k,val| val.select { |s| puts s.keys } }
@test.select { |k,val| val.select { |s| puts s } }
@test.select { |k,val| puts val}
@test.select { |k,val| puts v}
@test.select { |k,val| puts k}
@test.select { |s| puts s}
@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage)
@test@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage)
@test
@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| s.values.select { |val| puts (val == "1") } }
@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| s.values.select { |val| puts val.class } }
@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| s.values.select { |val| puts val } }
@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| s.values.select { |val| put val } }
@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| s.values.select { |val| val == 1 } }
@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| s.values.select { |val| val == "1"} }
@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| s.values == 1 }
@test
@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| s.values == "1" }
@test
@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| s.values }
@test
@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| puts s.values }
@test
@test = params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| s.values }
params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| s.values }
params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| puts s.key }
params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| puts s[key] }
params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| puts s.keys }
params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| puts s.values == 1 }
params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| puts s.values }
params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| puts s.keys }
params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| puts s }
params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| puts index +=1 }
index = 0
i = 0
params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| puts i+=1 }
params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| puts s.class }
params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage)
params.except(:utf8, :search, :commit, :controller, :action, :zip_code, :mileage).values.select { |s| puts s.class }
params.except(:utf8, :search, :commit)
params.except(:utf8, :search, :commit, :controller, :action).values.select { |s| puts s.class }
params.except(:utf8, :search, :commit, :controller, :action).values.select { |s| puts s.keys }
params.except(:utf8, :search, :commit, :controller, :action).values.select { |s| puts s }
params.except(:utf8, :search, :commit).values.select { |s| puts s }
params.except(:utf8, :search, :commit).values.select { |s| s.value == "1" }
params.except(:utf8, :search, :commit).values.class
params.except(:utf8, :search, :commit).values.values
params.except(:utf8, :search, :commit).values
params.except(:utf8, :search, :commit)
params
c
@skate_spots.present?
@skate_spots.count
@skate_spots.any?
c
@skate_spots
c
(@skate_spots.ids & @BOTH_IDs).any?
 (@skate_spots.ids & @BOTH_IDs).any?
((params[:upvotes][:upvoteFilter] == "1") and (params[:downvotes][:downvoteFilter] == "1"))
@skate_spots
c
@skate_spots.select { |ss| params[:search] }
@skate_spots.select { |ss| ss.params[:search] }
SkateSpot.search(params[:search])
c
test
test = (@skate_spots.ids & @BOTH_IDs)
(@skate_spots.ids & @BOTH_IDs).any?
c
(@skate_spots.ids & @BOTH_IDs).any?
@skate_spots.ids
@skate_spots.ids.include? @BOTH_IDs
@BOTH_IDs
c
@BOTH_IDs
@skate_spots.count
@skate_spots
@skate_spots.ids.include? @BOTH_IDs
c
@skate_spots.ids.include? @BOTH_IDs
@skate_spots.second.name
@skate_spots.first.name
@skate_spots
c
@BOTH_IDs.include? @skate_spots.ids
@BOTH_IDs
@skate_spots.ids
@skate_spots.any?
@skate_spots
c
up
c
@skate_spots.count
@skate_spots
c
@skate_spots.first.class
@skate_spots.first
@skate_spots.class
@skate_spots
c
params
c
skate_spots
c
@test = @skate_spots.select { |ss| ss.street_plaza == true }
@test.count
@test = @skate_spots.select { |ss| ss.street_plaza == true }
